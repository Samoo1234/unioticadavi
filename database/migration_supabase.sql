-- =============================================
-- MIGRAÇÃO PARA SUPABASE - SISTEMA ÓTICA
-- Execute cada seção separadamente no SQL Editor
-- =============================================

-- SEÇÃO 1: CRIAR TABELA FORNECEDORES
-- =============================================
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18),
  telefone VARCHAR(20),
  email VARCHAR(255),
  endereco TEXT,
  contato_principal VARCHAR(255),
  observacoes TEXT,
  filial_id BIGINT REFERENCES filiais(id),
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- SEÇÃO 2: MIGRAR REFERÊNCIAS DE CIDADE_ID PARA FILIAL_ID
-- =============================================
-- Como agendamento e CMV são da mesma loja, usaremos apenas filiais

-- Atualizar referências de cidade_id para filial_id nas tabelas que usam cidades
-- Assumindo que cada cidade corresponde a uma filial com o mesmo nome

-- Atualizar tabela clientes (cidade_id -> filial_id)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'clientes' AND column_name = 'cidade_id') THEN
        -- Criar filiais para cidades que não existem como filial
        INSERT INTO filiais (nome, endereco, ativa, created_at, updated_at)
        SELECT DISTINCT 
            c.nome,
            COALESCE('Endereço de ' || c.nome, 'Endereço não informado'),
            c.ativa,
            c.created_at,
            c.updated_at
        FROM cidades c
        WHERE NOT EXISTS (
            SELECT 1 FROM filiais f 
            WHERE LOWER(f.nome) = LOWER(c.nome)
        );
        
        -- Atualizar referências dos clientes
        UPDATE clientes 
        SET cidade_id = (
            SELECT f.id 
            FROM filiais f 
            JOIN cidades c ON LOWER(f.nome) = LOWER(c.nome)
            WHERE c.id = clientes.cidade_id
        )
        WHERE cidade_id IS NOT NULL;
    END IF;
END $$;

-- Atualizar outras tabelas que referenciam cidades
DO $$
BEGIN
    -- Agendamentos
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'agendamentos' AND column_name = 'cidade_id') THEN
        UPDATE agendamentos 
        SET cidade_id = (
            SELECT f.id 
            FROM filiais f 
            JOIN cidades c ON LOWER(f.nome) = LOWER(c.nome)
            WHERE c.id = agendamentos.cidade_id
        )
        WHERE cidade_id IS NOT NULL;
    END IF;
    
    -- Datas disponíveis
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'datas_disponiveis' AND column_name = 'cidade_id') THEN
        UPDATE datas_disponiveis 
        SET cidade_id = (
            SELECT f.id 
            FROM filiais f 
            JOIN cidades c ON LOWER(f.nome) = LOWER(c.nome)
            WHERE c.id = datas_disponiveis.cidade_id
        )
        WHERE cidade_id IS NOT NULL;
    END IF;
    
    -- Configurações de horários
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'configuracoes_horarios' AND column_name = 'cidade_id') THEN
        UPDATE configuracoes_horarios 
        SET cidade_id = (
            SELECT f.id 
            FROM filiais f 
            JOIN cidades c ON LOWER(f.nome) = LOWER(c.nome)
            WHERE c.id = configuracoes_horarios.cidade_id
        )
        WHERE cidade_id IS NOT NULL;
    END IF;
END $$;

-- SEÇÃO 3: COMENTÁRIO SOBRE PRÓXIMOS PASSOS
-- =============================================
-- IMPORTANTE: Após esta migração, você deve:
-- 1. Atualizar o código frontend para usar apenas 'filiais' 
-- 2. Renomear as colunas cidade_id para filial_id no código
-- 3. Eventualmente, remover a tabela 'cidades' quando não for mais necessária

-- SEÇÃO 4: CRIAR ÍNDICES
-- =============================================

-- Índices para fornecedores
CREATE INDEX IF NOT EXISTS idx_fornecedores_filial_id ON fornecedores(filial_id);
CREATE INDEX IF NOT EXISTS idx_fornecedores_ativo ON fornecedores(ativo);
CREATE INDEX IF NOT EXISTS idx_fornecedores_nome ON fornecedores(nome);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cnpj ON fornecedores(cnpj) WHERE cnpj IS NOT NULL;

-- Índices para otimização de consultas
CREATE INDEX IF NOT EXISTS idx_filiais_nome_lower ON filiais(LOWER(nome));

-- SEÇÃO 5: CRIAR TRIGGERS
-- =============================================

-- Função para atualizar updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger para fornecedores
DROP TRIGGER IF EXISTS update_fornecedores_updated_at ON fornecedores;
CREATE TRIGGER update_fornecedores_updated_at 
    BEFORE UPDATE ON fornecedores 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- SEÇÃO 6: CONFIGURAR RLS (ROW LEVEL SECURITY)
-- =============================================

-- Habilitar RLS para fornecedores
ALTER TABLE fornecedores ENABLE ROW LEVEL SECURITY;

-- Remover políticas existentes (se houver)
DROP POLICY IF EXISTS "Usuários podem ver fornecedores de sua filial" ON fornecedores;
DROP POLICY IF EXISTS "Usuários podem inserir fornecedores em sua filial" ON fornecedores;
DROP POLICY IF EXISTS "Usuários podem atualizar fornecedores de sua filial" ON fornecedores;
DROP POLICY IF EXISTS "Usuários podem deletar fornecedores de sua filial" ON fornecedores;

-- Política para SELECT
CREATE POLICY "Usuários podem ver fornecedores de sua filial" ON fornecedores
    FOR SELECT USING (
        filial_id IN (
            SELECT filial_id FROM usuarios WHERE id = auth.uid()
        )
    );

-- Política para INSERT
CREATE POLICY "Usuários podem inserir fornecedores em sua filial" ON fornecedores
    FOR INSERT WITH CHECK (
        filial_id IN (
            SELECT filial_id FROM usuarios WHERE id = auth.uid()
        )
    );

-- Política para UPDATE
CREATE POLICY "Usuários podem atualizar fornecedores de sua filial" ON fornecedores
    FOR UPDATE USING (
        filial_id IN (
            SELECT filial_id FROM usuarios WHERE id = auth.uid()
        )
    );

-- Política para DELETE
CREATE POLICY "Usuários podem deletar fornecedores de sua filial" ON fornecedores
    FOR DELETE USING (
        filial_id IN (
            SELECT filial_id FROM usuarios WHERE id = auth.uid()
        )
    );

-- SEÇÃO 7: INSERIR DADOS INICIAIS
-- =============================================

-- Inserir tipos de fornecedores básicos (se a tabela existir)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'tipos_fornecedores') THEN
        INSERT INTO tipos_fornecedores (nome, descricao) 
        VALUES 
            ('Laboratório', 'Fornecedor de lentes e produtos ópticos'),
            ('Armações', 'Fornecedor de armações e acessórios'),
            ('Equipamentos', 'Fornecedor de equipamentos ópticos'),
            ('Serviços', 'Prestador de serviços especializados'),
            ('Material de Escritório', 'Fornecedor de materiais de escritório'),
            ('Limpeza', 'Fornecedor de produtos de limpeza')
        ON CONFLICT (nome) DO NOTHING;
    END IF;
END $$;

-- SEÇÃO 8: VALIDAÇÃO FINAL
-- =============================================

-- Verificar se tudo foi criado corretamente
SELECT 'Tabela fornecedores criada' as status, 
       CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'fornecedores') 
            THEN 'OK' ELSE 'ERRO' END as resultado
UNION ALL
SELECT 'Índices criados' as status,
       CASE WHEN EXISTS (SELECT 1 FROM pg_indexes WHERE tablename = 'fornecedores') 
            THEN 'OK' ELSE 'ERRO' END as resultado
UNION ALL
SELECT 'Triggers criados' as status,
       CASE WHEN EXISTS (SELECT 1 FROM information_schema.triggers WHERE event_object_table = 'fornecedores') 
            THEN 'OK' ELSE 'ERRO' END as resultado
UNION ALL
SELECT 'RLS habilitado' as status,
       CASE WHEN EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'fornecedores') 
            THEN 'OK' ELSE 'ERRO' END as resultado;

-- Teste funcional básico
INSERT INTO fornecedores (nome, filial_id) 
SELECT 'Fornecedor Teste', id FROM filiais LIMIT 1;

SELECT 'Teste de inserção' as status,
       CASE WHEN EXISTS (SELECT 1 FROM fornecedores WHERE nome = 'Fornecedor Teste') 
            THEN 'OK' ELSE 'ERRO' END as resultado;

-- Limpar teste
DELETE FROM fornecedores WHERE nome = 'Fornecedor Teste';

-- Comentário: Migração simplificada concluída
-- Agora tanto agendamento quanto CMV usam a mesma estrutura de filiais

SELECT 'MIGRAÇÃO CONCLUÍDA COM SUCESSO!' as status;