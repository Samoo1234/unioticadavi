-- =============================================
-- SCRIPT DE MIGRAÇÃO PARA UNIFICAÇÃO DO BANCO
-- Sistema de Gestão de Ótica
-- =============================================
-- Este script unifica as tabelas cidades/filiais e adiciona tabelas faltantes

BEGIN;

-- =============================================
-- FASE 1: CRIAR TABELAS FALTANTES
-- =============================================

-- 1. Tabela de Categorias (para despesas e outras classificações)
CREATE TABLE IF NOT EXISTS categorias (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  tipo VARCHAR(50) NOT NULL, -- 'despesa_fixa', 'despesa_diversa', 'receita', etc.
  descricao TEXT,
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(nome, tipo)
);

-- Tabela de Fornecedores
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18),
  telefone VARCHAR(20),
  email VARCHAR(100),
  endereco TEXT,
  observacao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabela de Despesas Fixas
CREATE TABLE IF NOT EXISTS despesas_fixas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  categoria_id BIGINT REFERENCES categorias(id),
  nome VARCHAR(255) NOT NULL,
  descricao TEXT,
  valor DECIMAL(10, 2) NOT NULL,
  periodicidade VARCHAR(20) NOT NULL CHECK (periodicidade IN ('mensal', 'bimestral', 'trimestral', 'semestral', 'anual')),
  dia_vencimento INTEGER NOT NULL CHECK (dia_vencimento >= 1 AND dia_vencimento <= 31),
  forma_pagamento VARCHAR(50),
  observacao TEXT,
  status VARCHAR(20) NOT NULL DEFAULT 'ativo' CHECK (status IN ('ativo', 'inativo')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Tabela de Despesas Diversas
CREATE TABLE IF NOT EXISTS despesas_diversas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  categoria_id BIGINT REFERENCES categorias(id),
  fornecedor_id BIGINT REFERENCES fornecedores(id),
  nome VARCHAR(255) NOT NULL,
  descricao TEXT,
  valor DECIMAL(10, 2) NOT NULL,
  data_despesa DATE NOT NULL,
  data_pagamento DATE,
  forma_pagamento VARCHAR(50),
  observacao TEXT,
  status VARCHAR(20) NOT NULL DEFAULT 'pendente' CHECK (status IN ('pendente', 'pago', 'cancelado')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- FASE 2: PREPARAR UNIFICAÇÃO CIDADES -> FILIAIS
-- =============================================

-- Adicionar campos necessários à tabela filiais (se não existirem)
ALTER TABLE filiais 
ADD COLUMN IF NOT EXISTS estado VARCHAR(2),
ADD COLUMN IF NOT EXISTS cep VARCHAR(10),
ADD COLUMN IF NOT EXISTS cidade VARCHAR(255);

-- Criar tabela temporária para mapear cidades -> filiais
CREATE TEMPORARY TABLE mapeamento_cidades_filiais AS
SELECT 
  c.id as cidade_id,
  c.nome as cidade_nome,
  c.estado as cidade_estado,
  f.id as filial_id,
  f.nome as filial_nome
FROM cidades c
LEFT JOIN filiais f ON LOWER(c.nome) = LOWER(f.nome);

-- =============================================
-- FASE 3: MIGRAR DADOS DE CIDADES PARA FILIAIS
-- =============================================

-- Para cada cidade que não tem filial correspondente, criar uma filial
INSERT INTO filiais (nome, endereco, ativa, created_at, updated_at)
SELECT 
  c.nome,
  COALESCE('Endereço da ' || c.nome, 'Endereço não informado'),
  c.ativa,
  c.created_at,
  c.updated_at
FROM cidades c
WHERE NOT EXISTS (
  SELECT 1 FROM filiais f 
  WHERE LOWER(f.nome) = LOWER(c.nome)
);

-- Atualizar mapeamento após inserções
DROP TABLE mapeamento_cidades_filiais;
CREATE TEMPORARY TABLE mapeamento_cidades_filiais AS
SELECT 
  c.id as cidade_id,
  c.nome as cidade_nome,
  c.estado as cidade_estado,
  f.id as filial_id,
  f.nome as filial_nome
FROM cidades c
JOIN filiais f ON LOWER(c.nome) = LOWER(f.nome);

-- =============================================
-- FASE 4: ATUALIZAR REFERÊNCIAS DE CIDADE_ID PARA FILIAL_ID
-- =============================================

-- 4.1 Atualizar tabela clientes
UPDATE clientes 
SET cidade_id = (
  SELECT m.filial_id 
  FROM mapeamento_cidades_filiais m 
  WHERE m.cidade_id = clientes.cidade_id
)
WHERE cidade_id IS NOT NULL;

-- 4.2 Atualizar tabela agendamentos (cidade_id)
UPDATE agendamentos 
SET cidade_id = (
  SELECT m.filial_id 
  FROM mapeamento_cidades_filiais m 
  WHERE m.cidade_id = agendamentos.cidade_id
)
WHERE cidade_id IS NOT NULL;

-- 4.3 Atualizar tabela agendamentos (filial_id se for NULL)
UPDATE agendamentos 
SET filial_id = cidade_id
WHERE filial_id IS NULL AND cidade_id IS NOT NULL;

-- 4.4 Atualizar tabela datas_disponiveis
UPDATE datas_disponiveis 
SET cidade_id = (
  SELECT m.filial_id 
  FROM mapeamento_cidades_filiais m 
  WHERE m.cidade_id = datas_disponiveis.cidade_id
)
WHERE cidade_id IS NOT NULL;

-- 4.5 Atualizar tabela configuracoes_horarios
UPDATE configuracoes_horarios 
SET cidade_id = (
  SELECT m.filial_id 
  FROM mapeamento_cidades_filiais m 
  WHERE m.cidade_id = configuracoes_horarios.cidade_id
)
WHERE cidade_id IS NOT NULL;

-- =============================================
-- FASE 5: RENOMEAR COLUNAS PARA REFLETIR NOVA ESTRUTURA
-- =============================================

-- Renomear cidade_id para filial_id nas tabelas relevantes
-- NOTA: Isso deve ser feito após atualizar o código da aplicação

-- ALTER TABLE clientes RENAME COLUMN cidade_id TO filial_id;
-- ALTER TABLE agendamentos DROP COLUMN cidade_id; -- Manter apenas filial_id
-- ALTER TABLE datas_disponiveis RENAME COLUMN cidade_id TO filial_id;
-- ALTER TABLE configuracoes_horarios RENAME COLUMN cidade_id TO filial_id;

-- =============================================
-- FASE 6: CRIAR ÍNDICES PARA NOVAS TABELAS
-- =============================================

-- Índices para categorias
CREATE INDEX IF NOT EXISTS idx_categorias_tipo ON categorias(tipo);
CREATE INDEX IF NOT EXISTS idx_categorias_nome ON categorias(nome);
CREATE INDEX IF NOT EXISTS idx_categorias_ativa ON categorias(ativa);

-- Índices para despesas_fixas
CREATE INDEX IF NOT EXISTS idx_despesas_fixas_filial_id ON despesas_fixas(filial_id);
CREATE INDEX IF NOT EXISTS idx_despesas_fixas_categoria_id ON despesas_fixas(categoria_id);
CREATE INDEX IF NOT EXISTS idx_despesas_fixas_status ON despesas_fixas(status);
CREATE INDEX IF NOT EXISTS idx_despesas_fixas_periodicidade ON despesas_fixas(periodicidade);
CREATE INDEX IF NOT EXISTS idx_despesas_fixas_dia_vencimento ON despesas_fixas(dia_vencimento);

-- Índices para despesas_diversas
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_filial_id ON despesas_diversas(filial_id);
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_categoria_id ON despesas_diversas(categoria_id);
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_fornecedor_id ON despesas_diversas(fornecedor_id);
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_status ON despesas_diversas(status);
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_data_despesa ON despesas_diversas(data_despesa);
CREATE INDEX IF NOT EXISTS idx_despesas_diversas_data_pagamento ON despesas_diversas(data_pagamento);

-- Índices para fornecedores
CREATE INDEX IF NOT EXISTS idx_fornecedores_filial_id ON fornecedores(filial_id);
CREATE INDEX IF NOT EXISTS idx_fornecedores_nome ON fornecedores(nome);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cnpj ON fornecedores(cnpj);

-- =============================================
-- FASE 7: CRIAR TRIGGERS PARA NOVAS TABELAS
-- =============================================

-- Triggers para updated_at
CREATE TRIGGER set_timestamp_categorias 
  BEFORE UPDATE ON categorias 
  FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_despesas_fixas 
  BEFORE UPDATE ON despesas_fixas 
  FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_despesas_diversas 
  BEFORE UPDATE ON despesas_diversas 
  FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
  
CREATE TRIGGER set_timestamp_fornecedores 
  BEFORE UPDATE ON fornecedores 
  FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

-- =============================================
-- FASE 8: INSERIR DADOS INICIAIS
-- =============================================

-- Inserir categorias padrão para despesas
INSERT INTO categorias (nome, tipo, descricao, ativa) VALUES
-- Categorias para Despesas Fixas
('Aluguel', 'despesa_fixa', 'Aluguel do imóvel', true),
('Energia Elétrica', 'despesa_fixa', 'Conta de energia elétrica', true),
('Água', 'despesa_fixa', 'Conta de água', true),
('Telefone/Internet', 'despesa_fixa', 'Serviços de telecomunicações', true),
('Salários', 'despesa_fixa', 'Folha de pagamento', true),
('Encargos Sociais', 'despesa_fixa', 'INSS, FGTS e outros encargos', true),
('Seguro', 'despesa_fixa', 'Seguros diversos', true),
('Contabilidade', 'despesa_fixa', 'Serviços contábeis', true),
('Limpeza', 'despesa_fixa', 'Serviços de limpeza', true),
('Segurança', 'despesa_fixa', 'Serviços de segurança', true),

-- Categorias para Despesas Diversas
('Material de Escritório', 'despesa_diversa', 'Papelaria e materiais de escritório', true),
('Manutenção', 'despesa_diversa', 'Manutenção de equipamentos e instalações', true),
('Marketing', 'despesa_diversa', 'Publicidade e marketing', true),
('Viagem', 'despesa_diversa', 'Despesas com viagens', true),
('Treinamento', 'despesa_diversa', 'Cursos e treinamentos', true),
('Combustível', 'despesa_diversa', 'Combustível para veículos', true),
('Alimentação', 'despesa_diversa', 'Despesas com alimentação', true),
('Impostos', 'despesa_diversa', 'Impostos diversos', true),
('Taxas', 'despesa_diversa', 'Taxas governamentais', true),
('Outros', 'despesa_diversa', 'Outras despesas não categorizadas', true),

-- Categorias para Receitas
('Consultas', 'receita', 'Receitas de consultas médicas', true),
('Vendas de Óculos', 'receita', 'Vendas de óculos e armações', true),
('Vendas de Lentes', 'receita', 'Vendas de lentes oftálmicas', true),
('Serviços', 'receita', 'Outros serviços prestados', true),
('Acessórios', 'receita', 'Vendas de acessórios', true)

ON CONFLICT (nome, tipo) DO NOTHING;

-- =============================================
-- FASE 9: HABILITAR RLS PARA NOVAS TABELAS
-- =============================================

-- Habilitar RLS nas novas tabelas
ALTER TABLE categorias ENABLE ROW LEVEL SECURITY;
ALTER TABLE despesas_fixas ENABLE ROW LEVEL SECURITY;
ALTER TABLE despesas_diversas ENABLE ROW LEVEL SECURITY;
ALTER TABLE fornecedores ENABLE ROW LEVEL SECURITY;

-- Políticas para categorias (todos podem ver, apenas admins podem modificar)
CREATE POLICY "Usuários podem ver categorias" ON categorias FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND u.ativo = true
  )
);

CREATE POLICY "Admins podem gerenciar categorias" ON categorias FOR ALL USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND u.role IN ('super_admin', 'admin', 'manager')
    AND u.ativo = true
  )
);

-- Políticas para despesas_fixas (acesso baseado na filial)
CREATE POLICY "Usuários veem despesas fixas da sua filial" ON despesas_fixas FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = despesas_fixas.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.ativo = true
  )
);

CREATE POLICY "Usuários podem gerenciar despesas fixas da sua filial" ON despesas_fixas FOR ALL USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = despesas_fixas.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.role IN ('super_admin', 'admin', 'manager', 'financial')
    AND u.ativo = true
  )
);

-- Políticas para despesas_diversas (acesso baseado na filial)
CREATE POLICY "Usuários veem despesas diversas da sua filial" ON despesas_diversas FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = despesas_diversas.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.ativo = true
  )
);

CREATE POLICY "Usuários podem gerenciar despesas diversas da sua filial" ON despesas_diversas FOR ALL USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = despesas_diversas.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.role IN ('super_admin', 'admin', 'manager', 'financial')
    AND u.ativo = true
  )
);

-- Políticas para fornecedores (acesso baseado na filial)
CREATE POLICY "Usuários veem fornecedores da sua filial" ON fornecedores FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = fornecedores.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.ativo = true
  )
);

CREATE POLICY "Usuários podem gerenciar fornecedores da sua filial" ON fornecedores FOR ALL USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = fornecedores.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.role IN ('super_admin', 'admin', 'manager', 'financial')
    AND u.ativo = true
  )
);

-- =============================================
-- FASE 10: VERIFICAÇÕES E LIMPEZA
-- =============================================

-- Verificar se todas as migrações foram bem-sucedidas
SELECT 'Verificação de Migração' as status;

-- Contar registros nas novas tabelas
SELECT 'categorias' as tabela, COUNT(*) as registros FROM categorias
UNION ALL
SELECT 'despesas_fixas' as tabela, COUNT(*) as registros FROM despesas_fixas
UNION ALL
SELECT 'despesas_diversas' as tabela, COUNT(*) as registros FROM despesas_diversas;

-- Verificar se há registros órfãos após migração
SELECT 'Clientes sem filial válida' as problema, COUNT(*) as quantidade
FROM clientes c
LEFT JOIN filiais f ON c.cidade_id = f.id
WHERE c.cidade_id IS NOT NULL AND f.id IS NULL

UNION ALL

SELECT 'Agendamentos sem filial válida' as problema, COUNT(*) as quantidade
FROM agendamentos a
LEFT JOIN filiais f ON a.cidade_id = f.id
WHERE a.cidade_id IS NOT NULL AND f.id IS NULL;

-- Limpar tabela temporária
DROP TABLE IF EXISTS mapeamento_cidades_filiais;

COMMIT;

-- =============================================
-- INSTRUÇÕES PÓS-MIGRAÇÃO
-- =============================================

/*
APÓS EXECUTAR ESTE SCRIPT, VOCÊ DEVE:

1. ATUALIZAR O ARQUIVO src/types/database.ts:
   - Adicionar tipos para as novas tabelas
   - Atualizar referências de cidade_id para filial_id onde aplicável

2. ATUALIZAR COMPONENTES REACT:
   - Modificar componentes que usam 'cidades' para usar 'filiais'
   - Atualizar queries do Supabase
   - Ajustar interfaces TypeScript

3. ATUALIZAR SIDEBAR:
   - Remover link duplicado de 'Cidades' se existir
   - Manter apenas 'Filiais' no menu

4. TESTAR FUNCIONALIDADES:
   - Agendamentos
   - Gestão de filiais
   - Despesas fixas e diversas
   - Relatórios

5. OPCIONAL - REMOVER TABELA CIDADES:
   - Após confirmar que tudo funciona corretamente
   - DROP TABLE cidades CASCADE;

6. ATUALIZAR DOCUMENTAÇÃO:
   - Atualizar README
   - Documentar nova estrutura
*/

SELECT 'Migração concluída! Consulte as instruções pós-migração no final do script.' as resultado;