-- Schema Unificado para Sistema de Gestão de Ótica
-- Combina funcionalidades de Agendamentos (agend) + Controle Financeiro (cmv2)
-- Backend: Supabase (PostgreSQL)

BEGIN;

-- =============================================
-- TABELAS BÁSICAS DO SISTEMA
-- =============================================

-- 1. Filiais
CREATE TABLE IF NOT EXISTS filiais (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  endereco TEXT NOT NULL,
  telefone VARCHAR(20),
  responsavel VARCHAR(255),
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Cidades
CREATE TABLE IF NOT EXISTS cidades (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  estado VARCHAR(2) NOT NULL,
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Médicos
CREATE TABLE IF NOT EXISTS medicos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  crm VARCHAR(20) NOT NULL UNIQUE,
  especialidade VARCHAR(255),
  telefone VARCHAR(20),
  email VARCHAR(255),
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Clientes
CREATE TABLE IF NOT EXISTS clientes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cpf VARCHAR(14),
  telefone VARCHAR(20),
  email VARCHAR(255),
  data_nascimento DATE,
  endereco TEXT,
  cidade_id BIGINT REFERENCES cidades(id),
  observacoes TEXT,
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- SISTEMA DE USUÁRIOS E AUTENTICAÇÃO
-- =============================================

-- 5. Usuários do Sistema
CREATE TABLE IF NOT EXISTS usuarios (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  role VARCHAR(50) NOT NULL DEFAULT 'receptionist',
  filial_id BIGINT REFERENCES filiais(id),
  ativo BOOLEAN NOT NULL DEFAULT true,
  ultimo_login TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_role CHECK (role IN ('super_admin', 'admin', 'manager', 'receptionist', 'financial', 'doctor'))
);

-- =============================================
-- MÓDULO DE AGENDAMENTOS
-- =============================================

-- 6. Datas Disponíveis
CREATE TABLE IF NOT EXISTS datas_disponiveis (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cidade_id BIGINT NOT NULL REFERENCES cidades(id),
  data DATE NOT NULL,
  horarios_disponiveis JSONB NOT NULL DEFAULT '[]',
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(cidade_id, data)
);

-- 7. Configurações de Horários por Cidade
CREATE TABLE IF NOT EXISTS configuracoes_horarios (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cidade_id BIGINT NOT NULL REFERENCES cidades(id) UNIQUE,
  horario_inicio TIME NOT NULL DEFAULT '08:00',
  horario_fim TIME NOT NULL DEFAULT '18:00',
  intervalo_minutos INTEGER NOT NULL DEFAULT 30,
  horarios_almoco JSONB DEFAULT '[]',
  dias_funcionamento JSONB NOT NULL DEFAULT '[1,2,3,4,5]', -- 0=domingo, 1=segunda, etc
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 8. Agendamentos
CREATE TABLE IF NOT EXISTS agendamentos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cliente_id BIGINT REFERENCES clientes(id),
  medico_id BIGINT REFERENCES medicos(id),
  cidade_id BIGINT NOT NULL REFERENCES cidades(id),
  filial_id BIGINT REFERENCES filiais(id),
  data_hora TIMESTAMP WITH TIME ZONE NOT NULL,
  status VARCHAR(50) NOT NULL DEFAULT 'agendado',
  tipo_consulta VARCHAR(100),
  observacoes TEXT,
  valor DECIMAL(10,2),
  forma_pagamento VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_status CHECK (status IN ('agendado', 'confirmado', 'em_andamento', 'concluido', 'cancelado', 'remarcado'))
);

-- =============================================
-- MÓDULO FINANCEIRO
-- =============================================

-- 9. Tipos de Fornecedores
CREATE TABLE IF NOT EXISTS tipos_fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  descricao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 10. Fornecedores
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18) UNIQUE,
  cpf VARCHAR(14) UNIQUE,
  endereco TEXT,
  telefone VARCHAR(20),
  email VARCHAR(255),
  contato VARCHAR(255),
  tipo_id BIGINT REFERENCES tipos_fornecedores(id),
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT cnpj_or_cpf CHECK ((cnpj IS NOT NULL AND cpf IS NULL) OR (cnpj IS NULL AND cpf IS NOT NULL))
);

-- 11. Títulos a Pagar/Receber
CREATE TABLE IF NOT EXISTS titulos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  tipo VARCHAR(20) NOT NULL DEFAULT 'pagar',
  fornecedor_id BIGINT REFERENCES fornecedores(id),
  cliente_id BIGINT REFERENCES clientes(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  categoria VARCHAR(255),
  descricao TEXT,
  valor DECIMAL(10, 2) NOT NULL,
  data_vencimento DATE NOT NULL,
  data_pagamento DATE,
  status VARCHAR(50) NOT NULL DEFAULT 'pendente',
  forma_pagamento VARCHAR(50),
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_tipo CHECK (tipo IN ('pagar', 'receber')),
  CONSTRAINT valid_status_titulo CHECK (status IN ('pendente', 'pago', 'vencido', 'cancelado')),
  CONSTRAINT fornecedor_or_cliente CHECK (
    (tipo = 'pagar' AND fornecedor_id IS NOT NULL AND cliente_id IS NULL) OR
    (tipo = 'receber' AND cliente_id IS NOT NULL AND fornecedor_id IS NULL)
  )
);

-- 12. Ordens de Serviço (OS)
CREATE TABLE IF NOT EXISTS ordens_servico (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  cliente_id BIGINT NOT NULL REFERENCES clientes(id),
  medico_id BIGINT REFERENCES medicos(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  agendamento_id BIGINT REFERENCES agendamentos(id),
  data_os DATE NOT NULL,
  valor_venda DECIMAL(10, 2) NOT NULL DEFAULT 0,
  status VARCHAR(50) NOT NULL DEFAULT 'aberta',
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_status_os CHECK (status IN ('aberta', 'em_producao', 'pronta', 'entregue', 'cancelada'))
);

-- 13. Custos das OS
CREATE TABLE IF NOT EXISTS custos_os (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  os_id BIGINT NOT NULL REFERENCES ordens_servico(id) ON DELETE CASCADE,
  tipo_custo VARCHAR(100) NOT NULL,
  descricao TEXT,
  valor DECIMAL(10, 2) NOT NULL DEFAULT 0,
  fornecedor_id BIGINT REFERENCES fornecedores(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 14. Movimentações Financeiras Gerais
CREATE TABLE IF NOT EXISTS movimentacoes_financeiras (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  tipo VARCHAR(20) NOT NULL,
  categoria VARCHAR(100),
  descricao TEXT NOT NULL,
  valor DECIMAL(10, 2) NOT NULL,
  data_movimentacao DATE NOT NULL,
  forma_pagamento VARCHAR(50),
  agendamento_id BIGINT REFERENCES agendamentos(id),
  os_id BIGINT REFERENCES ordens_servico(id),
  titulo_id BIGINT REFERENCES titulos(id),
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_tipo_mov CHECK (tipo IN ('receita', 'despesa'))
);

-- =============================================
-- SISTEMA DE NOTIFICAÇÕES
-- =============================================

-- 15. Templates de Notificações
CREATE TABLE IF NOT EXISTS templates_notificacoes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  tipo VARCHAR(50) NOT NULL,
  assunto VARCHAR(255),
  conteudo TEXT NOT NULL,
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_tipo_template CHECK (tipo IN ('email', 'sms', 'whatsapp'))
);

-- 16. Histórico de Notificações Enviadas
CREATE TABLE IF NOT EXISTS notificacoes_enviadas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  template_id BIGINT REFERENCES templates_notificacoes(id),
  destinatario VARCHAR(255) NOT NULL,
  tipo VARCHAR(50) NOT NULL,
  conteudo TEXT,
  status VARCHAR(50) NOT NULL DEFAULT 'enviado',
  data_envio TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  agendamento_id BIGINT REFERENCES agendamentos(id),
  cliente_id BIGINT REFERENCES clientes(id),
  erro TEXT,
  CONSTRAINT valid_tipo_notif CHECK (tipo IN ('email', 'sms', 'whatsapp')),
  CONSTRAINT valid_status_notif CHECK (status IN ('enviado', 'entregue', 'falhou', 'pendente'))
);

-- =============================================
-- ÍNDICES PARA PERFORMANCE
-- =============================================

-- Índices para filiais
CREATE INDEX IF NOT EXISTS idx_filiais_ativa ON filiais(ativa);
CREATE INDEX IF NOT EXISTS idx_filiais_nome ON filiais(nome);

-- Índices para cidades
CREATE INDEX IF NOT EXISTS idx_cidades_nome ON cidades(nome);
CREATE INDEX IF NOT EXISTS idx_cidades_ativa ON cidades(ativa);

-- Índices para médicos
CREATE INDEX IF NOT EXISTS idx_medicos_nome ON medicos(nome);
CREATE INDEX IF NOT EXISTS idx_medicos_crm ON medicos(crm);
CREATE INDEX IF NOT EXISTS idx_medicos_ativo ON medicos(ativo);

-- Índices para clientes
CREATE INDEX IF NOT EXISTS idx_clientes_nome ON clientes(nome);
CREATE INDEX IF NOT EXISTS idx_clientes_cpf ON clientes(cpf);
CREATE INDEX IF NOT EXISTS idx_clientes_telefone ON clientes(telefone);
CREATE INDEX IF NOT EXISTS idx_clientes_cidade_id ON clientes(cidade_id);
CREATE INDEX IF NOT EXISTS idx_clientes_ativo ON clientes(ativo);

-- Índices para usuários
CREATE INDEX IF NOT EXISTS idx_usuarios_email ON usuarios(email);
CREATE INDEX IF NOT EXISTS idx_usuarios_role ON usuarios(role);
CREATE INDEX IF NOT EXISTS idx_usuarios_filial_id ON usuarios(filial_id);
CREATE INDEX IF NOT EXISTS idx_usuarios_ativo ON usuarios(ativo);

-- Índices para agendamentos
CREATE INDEX IF NOT EXISTS idx_agendamentos_data_hora ON agendamentos(data_hora);
CREATE INDEX IF NOT EXISTS idx_agendamentos_cliente_id ON agendamentos(cliente_id);
CREATE INDEX IF NOT EXISTS idx_agendamentos_medico_id ON agendamentos(medico_id);
CREATE INDEX IF NOT EXISTS idx_agendamentos_cidade_id ON agendamentos(cidade_id);
CREATE INDEX IF NOT EXISTS idx_agendamentos_filial_id ON agendamentos(filial_id);
CREATE INDEX IF NOT EXISTS idx_agendamentos_status ON agendamentos(status);

-- Índices para datas disponíveis
CREATE INDEX IF NOT EXISTS idx_datas_disponiveis_cidade_data ON datas_disponiveis(cidade_id, data);
CREATE INDEX IF NOT EXISTS idx_datas_disponiveis_ativa ON datas_disponiveis(ativa);

-- Índices para fornecedores
CREATE INDEX IF NOT EXISTS idx_fornecedores_nome ON fornecedores(nome);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cnpj ON fornecedores(cnpj);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cpf ON fornecedores(cpf);
CREATE INDEX IF NOT EXISTS idx_fornecedores_tipo_id ON fornecedores(tipo_id);
CREATE INDEX IF NOT EXISTS idx_fornecedores_ativo ON fornecedores(ativo);

-- Índices para títulos
CREATE INDEX IF NOT EXISTS idx_titulos_numero ON titulos(numero);
CREATE INDEX IF NOT EXISTS idx_titulos_tipo ON titulos(tipo);
CREATE INDEX IF NOT EXISTS idx_titulos_fornecedor_id ON titulos(fornecedor_id);
CREATE INDEX IF NOT EXISTS idx_titulos_cliente_id ON titulos(cliente_id);
CREATE INDEX IF NOT EXISTS idx_titulos_filial_id ON titulos(filial_id);
CREATE INDEX IF NOT EXISTS idx_titulos_data_vencimento ON titulos(data_vencimento);
CREATE INDEX IF NOT EXISTS idx_titulos_status ON titulos(status);

-- Índices para ordens de serviço
CREATE INDEX IF NOT EXISTS idx_os_numero ON ordens_servico(numero);
CREATE INDEX IF NOT EXISTS idx_os_cliente_id ON ordens_servico(cliente_id);
CREATE INDEX IF NOT EXISTS idx_os_filial_id ON ordens_servico(filial_id);
CREATE INDEX IF NOT EXISTS idx_os_data_os ON ordens_servico(data_os);
CREATE INDEX IF NOT EXISTS idx_os_status ON ordens_servico(status);

-- Índices para custos OS
CREATE INDEX IF NOT EXISTS idx_custos_os_os_id ON custos_os(os_id);
CREATE INDEX IF NOT EXISTS idx_custos_os_tipo_custo ON custos_os(tipo_custo);
CREATE INDEX IF NOT EXISTS idx_custos_os_fornecedor_id ON custos_os(fornecedor_id);

-- Índices para movimentações financeiras
CREATE INDEX IF NOT EXISTS idx_movimentacoes_filial_id ON movimentacoes_financeiras(filial_id);
CREATE INDEX IF NOT EXISTS idx_movimentacoes_tipo ON movimentacoes_financeiras(tipo);
CREATE INDEX IF NOT EXISTS idx_movimentacoes_data ON movimentacoes_financeiras(data_movimentacao);
CREATE INDEX IF NOT EXISTS idx_movimentacoes_categoria ON movimentacoes_financeiras(categoria);

-- =============================================
-- FUNÇÕES E TRIGGERS
-- =============================================

-- Função para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para updated_at
CREATE TRIGGER set_timestamp_filiais BEFORE UPDATE ON filiais FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_cidades BEFORE UPDATE ON cidades FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_medicos BEFORE UPDATE ON medicos FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_clientes BEFORE UPDATE ON clientes FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_usuarios BEFORE UPDATE ON usuarios FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_agendamentos BEFORE UPDATE ON agendamentos FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_datas_disponiveis BEFORE UPDATE ON datas_disponiveis FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_configuracoes_horarios BEFORE UPDATE ON configuracoes_horarios FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_tipos_fornecedores BEFORE UPDATE ON tipos_fornecedores FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_fornecedores BEFORE UPDATE ON fornecedores FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_titulos BEFORE UPDATE ON titulos FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_ordens_servico BEFORE UPDATE ON ordens_servico FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_custos_os BEFORE UPDATE ON custos_os FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_movimentacoes_financeiras BEFORE UPDATE ON movimentacoes_financeiras FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_templates_notificacoes BEFORE UPDATE ON templates_notificacoes FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

-- =============================================
-- POLÍTICAS RLS (ROW LEVEL SECURITY)
-- =============================================

-- Habilitar RLS nas tabelas sensíveis
ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE agendamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE titulos ENABLE ROW LEVEL SECURITY;
ALTER TABLE ordens_servico ENABLE ROW LEVEL SECURITY;
ALTER TABLE movimentacoes_financeiras ENABLE ROW LEVEL SECURITY;

-- Políticas para usuários
CREATE POLICY "Usuários podem ver próprio perfil" ON usuarios FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Admins podem ver todos usuários" ON usuarios FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND u.role IN ('super_admin', 'admin')
    AND u.ativo = true
  )
);

-- Políticas para agendamentos (acesso baseado na filial do usuário)
CREATE POLICY "Usuários veem agendamentos da sua filial" ON agendamentos FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = agendamentos.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.ativo = true
  )
);

-- Políticas para títulos (acesso baseado na filial)
CREATE POLICY "Usuários veem títulos da sua filial" ON titulos FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM usuarios u 
    WHERE u.id = auth.uid() 
    AND (u.filial_id = titulos.filial_id OR u.role IN ('super_admin', 'admin'))
    AND u.ativo = true
  )
);

-- =============================================
-- DADOS INICIAIS
-- =============================================

-- Inserir filial padrão
INSERT INTO filiais (nome, endereco, ativa) VALUES
('Filial Principal', 'Endereço da Filial Principal', true)
ON CONFLICT DO NOTHING;

-- Inserir cidades iniciais
INSERT INTO cidades (nome, estado, ativa) VALUES
('São Paulo', 'SP', true),
('Rio de Janeiro', 'RJ', true),
('Belo Horizonte', 'MG', true)
ON CONFLICT (nome) DO NOTHING;

-- Inserir tipos de fornecedores
INSERT INTO tipos_fornecedores (nome, descricao) VALUES
('Lentes', 'Fornecedores especializados em lentes oftálmicas'),
('Armações', 'Fornecedores de armações e óculos'),
('Equipamentos', 'Fornecedores de equipamentos ópticos e médicos'),
('Materiais', 'Fornecedores de materiais diversos para ótica'),
('Serviços', 'Prestadores de serviços especializados'),
('Produtos de Limpeza', 'Fornecedores de produtos para limpeza e manutenção'),
('Acessórios', 'Fornecedores de acessórios para óculos')
ON CONFLICT (nome) DO NOTHING;

-- Inserir templates de notificação básicos
INSERT INTO templates_notificacoes (nome, tipo, assunto, conteudo, ativo) VALUES
('Confirmação de Agendamento', 'whatsapp', 'Agendamento Confirmado', 
 'Olá {nome}! Seu agendamento foi confirmado para {data} às {horario} em {cidade}. Aguardamos você!', true),
('Lembrete de Consulta', 'whatsapp', 'Lembrete de Consulta', 
 'Olá {nome}! Lembramos que você tem consulta amanhã ({data}) às {horario} em {cidade}. Até lá!', true),
('Cancelamento de Agendamento', 'whatsapp', 'Agendamento Cancelado', 
 'Olá {nome}! Seu agendamento para {data} às {horario} foi cancelado. Entre em contato para reagendar.', true)
ON CONFLICT DO NOTHING;

COMMIT;

-- =============================================
-- VERIFICAÇÕES FINAIS
-- =============================================

SELECT 'Schema unificado criado com sucesso!' as status;

SELECT 'Tabelas criadas:' as info;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
  'filiais', 'cidades', 'medicos', 'clientes', 'usuarios',
  'agendamentos', 'datas_disponiveis', 'configuracoes_horarios',
  'tipos_fornecedores', 'fornecedores', 'titulos', 'ordens_servico', 
  'custos_os', 'movimentacoes_financeiras', 'templates_notificacoes', 
  'notificacoes_enviadas'
)
ORDER BY table_name;

SELECT 'Dados inseridos:' as info;
SELECT 'filiais' as tabela, COUNT(*) as registros FROM filiais
UNION ALL
SELECT 'cidades' as tabela, COUNT(*) as registros FROM cidades
UNION ALL
SELECT 'tipos_fornecedores' as tabela, COUNT(*) as registros FROM tipos_fornecedores
UNION ALL
SELECT 'templates_notificacoes' as tabela, COUNT(*) as registros FROM templates_notificacoes;