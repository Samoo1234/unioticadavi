-- Script para verificar e corrigir estrutura das tabelas no Supabase
-- Execute este script no SQL Editor do Supabase

-- =============================================
-- VERIFICAR ESTRUTURA ATUAL DAS TABELAS
-- =============================================

SELECT 'Verificando estrutura das tabelas principais...' as status;

-- Verificar se as tabelas existem
SELECT 
  table_name,
  CASE 
    WHEN table_name IS NOT NULL THEN 'EXISTE'
    ELSE 'NÃO EXISTE'
  END as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('filiais', 'cidades', 'medicos', 'clientes', 'datas_disponiveis', 'configuracoes_horarios')
ORDER BY table_name;

-- Verificar estrutura da tabela medicos
SELECT 'Estrutura da tabela medicos:' as info;
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'medicos' AND table_schema = 'public'
ORDER BY ordinal_position;

-- Verificar estrutura da tabela datas_disponiveis
SELECT 'Estrutura da tabela datas_disponiveis:' as info;
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'datas_disponiveis' AND table_schema = 'public'
ORDER BY ordinal_position;

-- Verificar estrutura da tabela configuracoes_horarios
SELECT 'Estrutura da tabela configuracoes_horarios:' as info;
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'configuracoes_horarios' AND table_schema = 'public'
ORDER BY ordinal_position;

-- =============================================
-- CRIAR/CORRIGIR TABELAS PRINCIPAIS
-- =============================================

-- 1. Tabela filiais (simplificada)
CREATE TABLE IF NOT EXISTS filiais (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabela cidades
CREATE TABLE IF NOT EXISTS cidades (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  estado VARCHAR(2) NOT NULL,
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Tabela medicos
CREATE TABLE IF NOT EXISTS medicos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  crm VARCHAR(20) NOT NULL UNIQUE,
  especialidade VARCHAR(255),
  telefone VARCHAR(20),
  email VARCHAR(255),
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Adicionar coluna ativo se não existir
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'medicos' AND column_name = 'ativo') THEN
        ALTER TABLE medicos ADD COLUMN ativo BOOLEAN NOT NULL DEFAULT true;
    END IF;
END $$;

-- 4. Tabela clientes
CREATE TABLE IF NOT EXISTS clientes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cpf VARCHAR(14),
  telefone VARCHAR(20),
  email VARCHAR(255),
  data_nascimento DATE,
  endereco TEXT,
  cidade_id BIGINT REFERENCES cidades(id),
  observacoes TEXT,
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Tabela datas_disponiveis
CREATE TABLE IF NOT EXISTS datas_disponiveis (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cidade_id BIGINT NOT NULL REFERENCES cidades(id),
  medico_id BIGINT NOT NULL REFERENCES medicos(id),
  data DATE NOT NULL,
  horarios_disponiveis JSONB NOT NULL DEFAULT '[]',
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(cidade_id, medico_id, data)
);

-- 6. Tabela configuracoes_horarios
CREATE TABLE IF NOT EXISTS configuracoes_horarios (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cidade_id BIGINT NOT NULL REFERENCES cidades(id) UNIQUE,
  horario_inicio TIME NOT NULL DEFAULT '08:00',
  horario_fim TIME NOT NULL DEFAULT '18:00',
  intervalo_minutos INTEGER NOT NULL DEFAULT 30,
  horarios_almoco JSONB DEFAULT '{"inicio": "12:00", "fim": "13:00"}',
  dias_funcionamento JSONB NOT NULL DEFAULT '[1,2,3,4,5]',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. Tabela agendamentos
CREATE TABLE IF NOT EXISTS agendamentos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cliente_id BIGINT REFERENCES clientes(id),
  medico_id BIGINT REFERENCES medicos(id),
  cidade_id BIGINT NOT NULL REFERENCES cidades(id),
  filial_id BIGINT REFERENCES filiais(id),
  data_hora TIMESTAMP WITH TIME ZONE NOT NULL,
  status VARCHAR(50) NOT NULL DEFAULT 'agendado',
  tipo_consulta VARCHAR(100),
  observacoes TEXT,
  valor DECIMAL(10,2),
  forma_pagamento VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- CRIAR ÍNDICES ESSENCIAIS
-- =============================================

-- Índices para performance
CREATE INDEX IF NOT EXISTS idx_medicos_ativo ON medicos(ativo);
CREATE INDEX IF NOT EXISTS idx_medicos_crm ON medicos(crm);
CREATE INDEX IF NOT EXISTS idx_cidades_ativa ON cidades(ativa);
CREATE INDEX IF NOT EXISTS idx_datas_disponiveis_ativa ON datas_disponiveis(ativa);
CREATE INDEX IF NOT EXISTS idx_datas_disponiveis_data ON datas_disponiveis(data);
CREATE INDEX IF NOT EXISTS idx_configuracoes_horarios_cidade_id ON configuracoes_horarios(cidade_id);

-- =============================================
-- INSERIR DADOS BÁSICOS SE NÃO EXISTIREM
-- =============================================

-- Inserir filial padrão
INSERT INTO filiais (nome) 
VALUES ('Filial Principal')
ON CONFLICT (nome) DO NOTHING;

-- Inserir algumas cidades básicas
INSERT INTO cidades (nome, estado) VALUES
('São Paulo', 'SP'),
('Rio de Janeiro', 'RJ'),
('Belo Horizonte', 'MG'),
('Brasília', 'DF'),
('Salvador', 'BA')
ON CONFLICT (nome) DO NOTHING;

-- =============================================
-- VERIFICAÇÃO FINAL
-- =============================================

SELECT 'Verificação final das tabelas:' as status;

SELECT 
  table_name,
  (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name AND table_schema = 'public') as colunas
FROM information_schema.tables t
WHERE table_schema = 'public' 
AND table_name IN ('filiais', 'cidades', 'medicos', 'clientes', 'datas_disponiveis', 'configuracoes_horarios', 'agendamentos')
ORDER BY table_name;

-- Verificar se a coluna ativo existe na tabela medicos
SELECT 
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name = 'medicos' AND column_name = 'ativo') 
    THEN 'Coluna ativo EXISTE na tabela medicos'
    ELSE 'Coluna ativo NÃO EXISTE na tabela medicos'
  END as verificacao_ativo;

SELECT 'Script de verificação e correção executado com sucesso!' as resultado;