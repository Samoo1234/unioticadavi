-- Script para corrigir inconsistências no banco de dados
-- Execute este script ANTES do setup-primeiro-usuario.sql

BEGIN;

-- 1. Primeiro, criar a tabela filiais se não existir
CREATE TABLE IF NOT EXISTS filiais (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  endereco TEXT NOT NULL,
  telefone VARCHAR(20),
  responsavel VARCHAR(255),
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Inserir filial padrão se não existir
INSERT INTO filiais (nome, endereco, ativa)
VALUES ('Filial Principal', 'Endereço Principal', true)
ON CONFLICT DO NOTHING;

-- 3. Verificar se a tabela usuarios existe
DO $$
BEGIN
    -- Se a tabela usuarios existe, vamos corrigir o tipo do campo filial_id
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'usuarios') THEN
        -- Verificar se o campo filial_id é INTEGER e precisa ser alterado para BIGINT
        IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'usuarios' 
            AND column_name = 'filial_id' 
            AND data_type = 'integer'
        ) THEN
            -- Remover a constraint de foreign key se existir
            ALTER TABLE usuarios DROP CONSTRAINT IF EXISTS usuarios_filial_id_fkey;
            
            -- Alterar o tipo do campo
            ALTER TABLE usuarios ALTER COLUMN filial_id TYPE BIGINT;
            
            -- Recriar a foreign key
            ALTER TABLE usuarios ADD CONSTRAINT usuarios_filial_id_fkey 
                FOREIGN KEY (filial_id) REFERENCES filiais(id);
        END IF;
    ELSE
        -- Se a tabela usuarios não existe, criar com o tipo correto
        CREATE TABLE usuarios (
          id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
          nome VARCHAR(255) NOT NULL,
          email VARCHAR(255) UNIQUE NOT NULL,
          role VARCHAR(50) NOT NULL DEFAULT 'user',
          filial_id BIGINT REFERENCES filiais(id),
          ativo BOOLEAN NOT NULL DEFAULT true,
          ultimo_login TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Criar índices
        CREATE INDEX idx_usuarios_email ON usuarios(email);
        CREATE INDEX idx_usuarios_role ON usuarios(role);
        CREATE INDEX idx_usuarios_ativo ON usuarios(ativo);
        CREATE INDEX idx_usuarios_filial_id ON usuarios(filial_id);
        
        -- Criar função para atualizar updated_at
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $func$
        BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
        END;
        $func$ language 'plpgsql';
        
        -- Criar trigger
        CREATE TRIGGER update_usuarios_updated_at
            BEFORE UPDATE ON usuarios
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
        
        -- Habilitar RLS
        ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;
        
        -- Criar políticas de segurança
        CREATE POLICY "Usuários podem ver seus próprios dados" ON usuarios
            FOR SELECT USING (auth.uid() = id);
        
        CREATE POLICY "Usuários podem atualizar seus próprios dados" ON usuarios
            FOR UPDATE USING (auth.uid() = id);
        
        CREATE POLICY "Apenas admins podem inserir usuários" ON usuarios
            FOR INSERT WITH CHECK (
                EXISTS (
                    SELECT 1 FROM usuarios 
                    WHERE id = auth.uid() 
                    AND role IN ('super_admin', 'admin')
                )
            );
        
        CREATE POLICY "Apenas admins podem deletar usuários" ON usuarios
            FOR DELETE USING (
                EXISTS (
                    SELECT 1 FROM usuarios 
                    WHERE id = auth.uid() 
                    AND role IN ('super_admin', 'admin')
                )
            );
    END IF;
END
$$;

COMMIT;

-- 4. Verificações finais
SELECT 'Tabela filiais:' as info;
SELECT COUNT(*) as total_filiais FROM filiais;

SELECT 'Estrutura da tabela usuarios:' as info;
SELECT 
    column_name, 
    data_type, 
    is_nullable, 
    column_default
FROM information_schema.columns 
WHERE table_name = 'usuarios' 
ORDER BY ordinal_position;

-- INSTRUÇÕES:
-- 1. Execute este script primeiro
-- 2. Depois execute o setup-primeiro-usuario.sql
-- 3. Teste o login na aplicação