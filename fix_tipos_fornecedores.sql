-- Script para corrigir problemas com a tabela tipos_fornecedores
-- Execute este script no SQL Editor do Supabase

-- =============================================
-- VERIFICAR SE A TABELA EXISTE
-- =============================================

SELECT 'Verificando se a tabela tipos_fornecedores existe...' as status;

SELECT EXISTS (
    SELECT 1 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = 'tipos_fornecedores'
) as tabela_existe;

-- =============================================
-- CRIAR TABELA SE NÃO EXISTIR
-- =============================================

CREATE TABLE IF NOT EXISTS tipos_fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  descricao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- CONFIGURAR PERMISSÕES RLS
-- =============================================

-- Habilitar RLS na tabela
ALTER TABLE tipos_fornecedores ENABLE ROW LEVEL SECURITY;

-- Remover políticas existentes se houver
DROP POLICY IF EXISTS "tipos_fornecedores_select_policy" ON tipos_fornecedores;
DROP POLICY IF EXISTS "tipos_fornecedores_insert_policy" ON tipos_fornecedores;
DROP POLICY IF EXISTS "tipos_fornecedores_update_policy" ON tipos_fornecedores;
DROP POLICY IF EXISTS "tipos_fornecedores_delete_policy" ON tipos_fornecedores;

-- Criar políticas para permitir acesso completo a usuários autenticados
CREATE POLICY "tipos_fornecedores_select_policy" ON tipos_fornecedores
    FOR SELECT USING (true);

CREATE POLICY "tipos_fornecedores_insert_policy" ON tipos_fornecedores
    FOR INSERT WITH CHECK (true);

CREATE POLICY "tipos_fornecedores_update_policy" ON tipos_fornecedores
    FOR UPDATE USING (true);

CREATE POLICY "tipos_fornecedores_delete_policy" ON tipos_fornecedores
    FOR DELETE USING (true);

-- =============================================
-- INSERIR DADOS INICIAIS
-- =============================================

INSERT INTO tipos_fornecedores (nome, descricao) VALUES
('Laboratório', 'Fornecedores de lentes e produtos ópticos'),
('Armações', 'Fornecedores de armações e óculos'),
('Equipamentos', 'Fornecedores de equipamentos médicos'),
('Serviços', 'Prestadores de serviços diversos'),
('Material de Escritório', 'Fornecedores de material de escritório')
ON CONFLICT (nome) DO NOTHING;

-- =============================================
-- CRIAR TRIGGER PARA UPDATED_AT
-- =============================================

-- Função para atualizar timestamp (se não existir)
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar trigger para tipos_fornecedores
DROP TRIGGER IF EXISTS set_timestamp_tipos_fornecedores ON tipos_fornecedores;
CREATE TRIGGER set_timestamp_tipos_fornecedores
    BEFORE UPDATE ON tipos_fornecedores
    FOR EACH ROW
    EXECUTE FUNCTION trigger_set_timestamp();

-- =============================================
-- VERIFICAÇÃO FINAL
-- =============================================

SELECT 'Configuração concluída!' as resultado;

-- Verificar se a tabela foi criada
SELECT table_name, column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'tipos_fornecedores' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- Verificar dados inseridos
SELECT COUNT(*) as total_tipos FROM tipos_fornecedores;

-- Verificar políticas RLS
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE tablename = 'tipos_fornecedores';
