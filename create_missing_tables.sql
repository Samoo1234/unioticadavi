-- Script para criar tabelas que podem estar faltando no Supabase
-- Execute este script no SQL Editor do Supabase

-- =============================================
-- VERIFICAR TABELAS EXISTENTES
-- =============================================

SELECT 'Verificando tabelas existentes...' as status;

SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
  'configuracoes_horarios', 'tipos_fornecedores', 'fornecedores', 
  'titulos', 'ordens_servico', 'custos_os', 'movimentacoes_financeiras',
  'templates_notificacoes', 'notificacoes_enviadas'
)
ORDER BY table_name;

-- =============================================
-- CRIAR TABELAS FALTANTES
-- =============================================

-- 1. Tabela configuracoes_horarios (se não existir)
CREATE TABLE IF NOT EXISTS configuracoes_horarios (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id) UNIQUE,
  horario_inicio TIME NOT NULL DEFAULT '08:00',
  horario_fim TIME NOT NULL DEFAULT '18:00',
  intervalo_minutos INTEGER NOT NULL DEFAULT 30,
  horarios_almoco JSONB DEFAULT '{"inicio": "12:00", "fim": "13:00"}',
  dias_funcionamento JSONB NOT NULL DEFAULT '[1,2,3,4,5]',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabela tipos_fornecedores
CREATE TABLE IF NOT EXISTS tipos_fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  descricao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Tabela fornecedores
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18) UNIQUE,
  cpf VARCHAR(14) UNIQUE,
  endereco TEXT,
  telefone VARCHAR(20),
  email VARCHAR(255),
  contato VARCHAR(255),
  tipo_id BIGINT REFERENCES tipos_fornecedores(id),
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT cnpj_or_cpf CHECK ((cnpj IS NOT NULL AND cpf IS NULL) OR (cnpj IS NULL AND cpf IS NOT NULL))
);

-- 4. Tabela titulos
CREATE TABLE IF NOT EXISTS titulos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  tipo VARCHAR(20) NOT NULL DEFAULT 'pagar',
  fornecedor_id BIGINT REFERENCES fornecedores(id),
  cliente_id UUID REFERENCES clientes(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  categoria VARCHAR(255),
  descricao TEXT NOT NULL,
  valor DECIMAL(10, 2) NOT NULL,
  data_vencimento DATE NOT NULL,
  data_pagamento DATE,
  status VARCHAR(50) NOT NULL DEFAULT 'pendente',
  forma_pagamento VARCHAR(50),
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_tipo CHECK (tipo IN ('pagar', 'receber')),
  CONSTRAINT valid_status CHECK (status IN ('pendente', 'pago', 'vencido', 'cancelado'))
);

-- 5. Tabela ordens_servico
CREATE TABLE IF NOT EXISTS ordens_servico (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  cliente_id UUID NOT NULL REFERENCES clientes(id),
  medico_id UUID REFERENCES medicos(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  agendamento_id UUID REFERENCES agendamentos(id),
  data_os DATE NOT NULL,
  valor_venda DECIMAL(10, 2) NOT NULL DEFAULT 0,
  status VARCHAR(50) NOT NULL DEFAULT 'aberta',
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_status_os CHECK (status IN ('aberta', 'em_andamento', 'finalizada', 'cancelada'))
);

-- 6. Tabela custos_os
CREATE TABLE IF NOT EXISTS custos_os (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  os_id BIGINT NOT NULL REFERENCES ordens_servico(id) ON DELETE CASCADE,
  tipo_custo VARCHAR(100) NOT NULL,
  descricao TEXT,
  valor DECIMAL(10, 2) NOT NULL DEFAULT 0,
  fornecedor_id BIGINT REFERENCES fornecedores(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. Tabela movimentacoes_financeiras
CREATE TABLE IF NOT EXISTS movimentacoes_financeiras (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  tipo VARCHAR(20) NOT NULL,
  categoria VARCHAR(100),
  descricao TEXT NOT NULL,
  valor DECIMAL(10, 2) NOT NULL,
  data_movimentacao DATE NOT NULL,
  forma_pagamento VARCHAR(50),
  agendamento_id UUID REFERENCES agendamentos(id),
  os_id BIGINT REFERENCES ordens_servico(id),
  titulo_id BIGINT REFERENCES titulos(id),
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT valid_tipo_mov CHECK (tipo IN ('receita', 'despesa'))
);

-- =============================================
-- INSERIR DADOS INICIAIS
-- =============================================

-- Tipos de fornecedores básicos
INSERT INTO tipos_fornecedores (nome, descricao) VALUES
('Laboratório', 'Fornecedores de lentes e produtos ópticos'),
('Armações', 'Fornecedores de armações e óculos'),
('Equipamentos', 'Fornecedores de equipamentos médicos'),
('Serviços', 'Prestadores de serviços diversos'),
('Material de Escritório', 'Fornecedores de material de escritório')
ON CONFLICT (nome) DO NOTHING;

-- =============================================
-- CRIAR ÍNDICES
-- =============================================

CREATE INDEX IF NOT EXISTS idx_configuracoes_horarios_filial_id ON configuracoes_horarios(filial_id);
CREATE INDEX IF NOT EXISTS idx_fornecedores_ativo ON fornecedores(ativo);
CREATE INDEX IF NOT EXISTS idx_titulos_status ON titulos(status);
CREATE INDEX IF NOT EXISTS idx_titulos_data_vencimento ON titulos(data_vencimento);
CREATE INDEX IF NOT EXISTS idx_os_status ON ordens_servico(status);
CREATE INDEX IF NOT EXISTS idx_movimentacoes_data ON movimentacoes_financeiras(data_movimentacao);

-- =============================================
-- VERIFICAÇÃO FINAL
-- =============================================

SELECT 'Tabelas criadas com sucesso!' as resultado;

SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
  'configuracoes_horarios', 'tipos_fornecedores', 'fornecedores', 
  'titulos', 'ordens_servico', 'custos_os', 'movimentacoes_financeiras'
)
ORDER BY table_name;